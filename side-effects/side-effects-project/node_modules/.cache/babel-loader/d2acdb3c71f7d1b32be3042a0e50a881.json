{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mabdellateef\\\\Documents\\\\GitHub\\\\react-tutorial\\\\side-effects\\\\side-effects-project\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer } from 'react';\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button'; // Reducer function can be created outside the component scope because we dont \n// need any data from this component.\n// all the info needed by useReducer function will be generated automatically by react\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, actio) => {\n  return {\n    value: '',\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); //we will combine the value and the validity into one state managed by useReducer.\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: false\n  });\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      setFormIsValid(enteredEmail.includes('@') && enteredPassword.trim().length > 6);\n    }, 500); // before useEffect function excution this clean up function will run except the first excution\n\n    return () => {\n      clearTimeout(identifier);\n    };\n  }, [enteredEmail, enteredPassword]); // in dependencies we added what we are using inside our useEffect function\n  // the function is excuted only if the dependencies are changed\n  // id we set [] in dependencies the function will excute onl on the first rendering page\n\n  const emailChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const passwordChangeHandler = event => {\n    setEnteredPassword(event.target.value); // when we use useState on a state that depends on two other states \n    // we may face an issue related to the state ordering.\n    // in some cases maybe this state will run before enteredPassword state \n    // which is an senario we want to avoid. here useReducers comes to work.\n    // or and we use useReduce hook when we have redundancy between states.\n    // like what we have above (enteredEmail state and validation state are related)\n    // setFormIsValid(\n    //   enteredEmail.includes('@') && enteredPassword.trim().length > 6\n    // )\n  };\n\n  const validateEmailHandler = () => {\n    // we are updating this state by looking at another state thats something we must not do\n    // because enteredEmail state may not be updated yet\n    // if we use a function option to get the latest state it wont work properly here\n    // because we will get the latest version of setEmailIsValid not the enteredEmail state\n    // useReducers coming handy in theses situations which needs to update a state\n    // according to another state by merging them into a one state.\n    setEmailIsValid(enteredEmail.includes('@'));\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n    props.onLogin(enteredEmail, enteredPassword);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${emailIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"E-Mail\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          value: enteredEmail,\n          onChange: emailChangeHandler,\n          onBlur: validateEmailHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordIsValid === false ? classes.invalid : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          value: enteredPassword,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          disabled: !formIsValid,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"xbCSHRQuFyRhXduJozLTdMqUwx0=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/mabdellateef/Documents/GitHub/react-tutorial/side-effects/side-effects-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","Card","classes","Button","emailReducer","state","actio","value","isValid","Login","props","enteredEmail","setEnteredEmail","emailIsValid","setEmailIsValid","enteredPassword","setEnteredPassword","passwordIsValid","setPasswordIsValid","formIsValid","setFormIsValid","emailState","dispatchEmail","identifier","setTimeout","includes","trim","length","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","login","control","invalid","actions","btn"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;AAEA,OAAOC,IAAP,MAAiB,iBAAjB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAEA;AACA;AACA;;;;AAEA,MAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrC,SAAO;AAACC,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,OAAO,EAAE;AAArB,GAAP;AACD,CAFD;;AAIA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCd,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,EAAhD;AACA,QAAM,CAACiB,eAAD,EAAkBC,kBAAlB,IAAwClB,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACmB,eAAD,EAAkBC,kBAAlB,IAAwCpB,QAAQ,EAAtD;AACA,QAAM,CAACqB,WAAD,EAAcC,cAAd,IAAgCtB,QAAQ,CAAC,KAAD,CAA9C,CALuB,CAOvB;;AAEA,QAAM,CAACuB,UAAD,EAAaC,aAAb,IAA8BtB,UAAU,CAACI,YAAD,EAAe;AAC3DG,IAAAA,KAAK,EAAE,EADoD;AAE3DC,IAAAA,OAAO,EAAE;AAFkD,GAAf,CAA9C;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,UAAU,GAAGC,UAAU,CAAC,MAAM;AAClCJ,MAAAA,cAAc,CACZT,YAAY,CAACc,QAAb,CAAsB,GAAtB,KAA8BV,eAAe,CAACW,IAAhB,GAAuBC,MAAvB,GAAgC,CADlD,CAAd;AAGD,KAJ4B,EAI1B,GAJ0B,CAA7B,CADc,CAOd;;AACA,WAAO,MAAM;AACXC,MAAAA,YAAY,CAACL,UAAD,CAAZ;AACD,KAFD;AAIC,GAZM,EAaL,CAACZ,YAAD,EAAeI,eAAf,CAbK,CAAT,CAduB,CA6BvB;AACA;AACA;;AAEA,QAAMc,kBAAkB,GAAIC,KAAD,IAAW;AACpClB,IAAAA,eAAe,CAACkB,KAAK,CAACC,MAAN,CAAaxB,KAAd,CAAf;AACD,GAFD;;AAIA,QAAMyB,qBAAqB,GAAIF,KAAD,IAAW;AACvCd,IAAAA,kBAAkB,CAACc,KAAK,CAACC,MAAN,CAAaxB,KAAd,CAAlB,CADuC,CAGvC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAED,GAdD;;AAgBA,QAAM0B,oBAAoB,GAAG,MAAM;AACjC;AACA;AAEA;AACA;AAEA;AACA;AAEAnB,IAAAA,eAAe,CAACH,YAAY,CAACc,QAAb,CAAsB,GAAtB,CAAD,CAAf;AACD,GAXD;;AAaA,QAAMS,uBAAuB,GAAG,MAAM;AACpChB,IAAAA,kBAAkB,CAACH,eAAe,CAACW,IAAhB,GAAuBC,MAAvB,GAAgC,CAAjC,CAAlB;AACD,GAFD;;AAIA,QAAMQ,aAAa,GAAIL,KAAD,IAAW;AAC/BA,IAAAA,KAAK,CAACM,cAAN;AACA1B,IAAAA,KAAK,CAAC2B,OAAN,CAAc1B,YAAd,EAA4BI,eAA5B;AACD,GAHD;;AAKA,sBACE,QAAC,IAAD;AAAM,IAAA,SAAS,EAAEb,OAAO,CAACoC,KAAzB;AAAA,2BACE;AAAM,MAAA,QAAQ,EAAEH,aAAhB;AAAA,8BACE;AACE,QAAA,SAAS,EAAG,GAAEjC,OAAO,CAACqC,OAAQ,IAC5B1B,YAAY,KAAK,KAAjB,GAAyBX,OAAO,CAACsC,OAAjC,GAA2C,EAC5C,EAHH;AAAA,gCAKE;AAAO,UAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AACE,UAAA,IAAI,EAAC,OADP;AAEE,UAAA,EAAE,EAAC,OAFL;AAGE,UAAA,KAAK,EAAE7B,YAHT;AAIE,UAAA,QAAQ,EAAEkB,kBAJZ;AAKE,UAAA,MAAM,EAAEI;AALV;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAeE;AACE,QAAA,SAAS,EAAG,GAAE/B,OAAO,CAACqC,OAAQ,IAC5BtB,eAAe,KAAK,KAApB,GAA4Bf,OAAO,CAACsC,OAApC,GAA8C,EAC/C,EAHH;AAAA,gCAKE;AAAO,UAAA,OAAO,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,eAME;AACE,UAAA,IAAI,EAAC,UADP;AAEE,UAAA,EAAE,EAAC,UAFL;AAGE,UAAA,KAAK,EAAEzB,eAHT;AAIE,UAAA,QAAQ,EAAEiB,qBAJZ;AAKE,UAAA,MAAM,EAAEE;AALV;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,eA6BE;AAAK,QAAA,SAAS,EAAEhC,OAAO,CAACuC,OAAxB;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAsB,UAAA,SAAS,EAAEvC,OAAO,CAACwC,GAAzC;AAA8C,UAAA,QAAQ,EAAE,CAACvB,WAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA7BF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuCD,CAlHD;;GAAMV,K;;KAAAA,K;AAoHN,eAAeA,KAAf","sourcesContent":["import React, { useState, useEffect, useReducer } from 'react';\n\nimport Card from '../UI/Card/Card';\nimport classes from './Login.module.css';\nimport Button from '../UI/Button/Button';\n\n// Reducer function can be created outside the component scope because we dont \n// need any data from this component.\n// all the info needed by useReducer function will be generated automatically by react\n\nconst emailReducer = (state, actio) => {\n  return {value: '', isValid: false}\n}\n\nconst Login = (props) => {\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [emailIsValid, setEmailIsValid] = useState();\n  const [enteredPassword, setEnteredPassword] = useState('');\n  const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false);\n  \n  //we will combine the value and the validity into one state managed by useReducer.\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: '',\n    isValid: false,\n  })\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      setFormIsValid(\n        enteredEmail.includes('@') && enteredPassword.trim().length > 6\n      )\n    }, 500)\n\n    // before useEffect function excution this clean up function will run except the first excution\n    return () => {\n      clearTimeout(identifier)\n    }\n\n    }\n    , [enteredEmail, enteredPassword])\n\n  // in dependencies we added what we are using inside our useEffect function\n  // the function is excuted only if the dependencies are changed\n  // id we set [] in dependencies the function will excute onl on the first rendering page\n\n  const emailChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const passwordChangeHandler = (event) => {\n    setEnteredPassword(event.target.value);\n\n    // when we use useState on a state that depends on two other states \n    // we may face an issue related to the state ordering.\n    // in some cases maybe this state will run before enteredPassword state \n    // which is an senario we want to avoid. here useReducers comes to work.\n    // or and we use useReduce hook when we have redundancy between states.\n    // like what we have above (enteredEmail state and validation state are related)\n\n    // setFormIsValid(\n    //   enteredEmail.includes('@') && enteredPassword.trim().length > 6\n    // )\n\n  };\n\n  const validateEmailHandler = () => {\n    // we are updating this state by looking at another state thats something we must not do\n    // because enteredEmail state may not be updated yet\n\n    // if we use a function option to get the latest state it wont work properly here\n    // because we will get the latest version of setEmailIsValid not the enteredEmail state\n\n    // useReducers coming handy in theses situations which needs to update a state\n    // according to another state by merging them into a one state.\n\n    setEmailIsValid(enteredEmail.includes('@'));\n  };\n\n  const validatePasswordHandler = () => {\n    setPasswordIsValid(enteredPassword.trim().length > 6);\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    props.onLogin(enteredEmail, enteredPassword);\n  };\n\n  return (\n    <Card className={classes.login}>\n      <form onSubmit={submitHandler}>\n        <div\n          className={`${classes.control} ${\n            emailIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"email\">E-Mail</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            value={enteredEmail}\n            onChange={emailChangeHandler}\n            onBlur={validateEmailHandler}\n          />\n        </div>\n        <div\n          className={`${classes.control} ${\n            passwordIsValid === false ? classes.invalid : ''\n          }`}\n        >\n          <label htmlFor=\"password\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            value={enteredPassword}\n            onChange={passwordChangeHandler}\n            onBlur={validatePasswordHandler}\n          />\n        </div>\n        <div className={classes.actions}>\n          <Button type=\"submit\" className={classes.btn} disabled={!formIsValid}>\n            Login\n          </Button>\n        </div>\n      </form>\n    </Card>\n  );\n};\n\nexport default Login;\n"]},"metadata":{},"sourceType":"module"}