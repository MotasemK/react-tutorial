{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\labsh\\\\Documents\\\\Programming\\\\react-tutorial\\\\side-effects\\\\side-effects-project\\\\src\\\\components\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useReducer, useContext, useRef } from \"react\";\nimport Card from \"../UI/Card/Card\";\nimport classes from \"./Login.module.css\";\nimport Button from \"../UI/Button/Button\";\nimport AuthContext from \"../../store/auth-context\";\nimport Input from \"../UI/input/input\"; // Reducer function can be created outside the component scope because we dont\n// need any data from this component.\n// all the info needed by useReducer function will be generated automatically by react\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst emailReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.includes(\"@\")\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.includes(\"@\")\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst passwordReducer = (state, action) => {\n  if (action.type === \"USER_INPUT\") {\n    return {\n      value: action.val,\n      isValid: action.val.trim().length > 6\n    };\n  }\n\n  if (action.type === \"INPUT_BLUR\") {\n    return {\n      value: state.value,\n      isValid: state.value.trim().length > 6\n    };\n  }\n\n  return {\n    value: \"\",\n    isValid: false\n  };\n};\n\nconst Login = props => {\n  _s();\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [emailIsValid, setEmailIsValid] = useState();\n  // const [enteredPassword, setEnteredPassword] = useState('');\n  // const [passwordIsValid, setPasswordIsValid] = useState();\n  const [formIsValid, setFormIsValid] = useState(false); //we will combine the value and the validity into one state managed by useReducer.\n\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\n    value: \"\",\n    isValid: null\n  });\n  const authCtx = useContext(AuthContext);\n  const emailInputRef = useRef();\n  const passwordInputRef = useRef(); // after meeting the validity requiements for ex password exceeds 6 chars when we add more chars\n  // the function checks for validity again thats the case we dont want. we will use object destructuring technique\n  // to pull out certain props from an object\n  // this is alice assignment because its a part of object dest syntax\n\n  const {\n    isValid: emailIsValid\n  } = emailState;\n  const {\n    isValid: passwordIsValid\n  } = passwordState; // USE EFFECT SECTION\n\n  useEffect(() => {\n    const identifier = setTimeout(() => {\n      console.log(\"Checking for validity\");\n      setFormIsValid( // emailState.isValid && passwordState.isValid\n      // at this approach this function will excute only if the validity status changes\n      emailIsValid && passwordIsValid);\n    }, 500); //   // before useEffect function excution this clean up function will run except the first excution\n\n    return () => {\n      clearTimeout(identifier);\n    };\n  }, [emailIsValid, passwordIsValid]); // in dependencies we added what we are using inside our useEffect function\n  // the function is excuted only if the dependencies are changed\n  // id we set [] in dependencies the function will excute onl on the first rendering page\n\n  const emailChangeHandler = event => {\n    // setEnteredEmail(event.target.value);\n    dispatchEmail({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); // in setFormIsValid we still dependent on the state value comes from the reducer function\n    // son its not optimal to make a state which depends on another state\n    // setFormIsValid(\n    //   event.target.value.includes('@') && passwordState.trim().length > 6\n    // )\n  };\n\n  const passwordChangeHandler = event => {\n    // setEnteredPassword(event.target.value);\n    dispatchPassword({\n      type: \"USER_INPUT\",\n      val: event.target.value\n    }); // when we use useState on a state that depends on two other states\n    // we may face an issue related to the state ordering.\n    // in some cases maybe this state will run before enteredPassword state\n    // which is an senario we want to avoid. here useReducers comes to work.\n    // or and we use useReduce hook when we have redundancy between states.\n    // like what we have above (enteredEmail state and validation state are related)\n    // in setFormIsValid we still dependent on the state value comes from the reducer function\n    // son its not optimal to make a state which depends on another state.\n    // so we return to useEffect to make sure that these states will run at the latest version\n    // setFormIsValid(\n    //   emailState.isValid && event.target.value.trim().length > 6\n    // )\n  };\n\n  const validateEmailHandler = () => {\n    // we are updating this state by looking at another state thats something we must not do\n    // because enteredEmail state may not be updated yet\n    // if we use a function option to get the latest state it wont work properly here\n    // because we will get the latest version of setEmailIsValid not the enteredEmail state\n    // useReducers coming handy in theses situations which needs to update a state\n    // according to another state by merging them into a one state.\n    // Replacing enteredEmail by emailState.value\n    // setEmailIsValid(emailState.isValid);\n    dispatchEmail({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const validatePasswordHandler = () => {\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\n    dispatchPassword({\n      type: \"INPUT_BLUR\"\n    });\n  };\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (formIsValid) {\n      authCtx.onLogin(emailState.value, passwordState.value);\n    } else if (!emailIsValid) {\n      emailInputRef.current.activate();\n    } else {\n      passwordInputRef.current.activate();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.login,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: submitHandler,\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        ref: emailInputRef,\n        id: \"email\",\n        label: \"E-mail\",\n        type: \"email\",\n        isValid: emailIsValid,\n        value: emailState.value,\n        onChange: emailChangeHandler,\n        onBlur: validateEmailHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${classes.control} ${passwordState.isValid === false ? classes.invalid : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          ref: passwordInputRef,\n          type: \"password\",\n          id: \"Password\",\n          isValid: passwordIsValid,\n          value: passwordState.value,\n          onChange: passwordChangeHandler,\n          onBlur: validatePasswordHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.actions,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          className: classes.btn,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Login, \"6Gdc5+zl2SXkxpTxnJfJZOuNhVI=\");\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/labsh/Documents/Programming/react-tutorial/side-effects/side-effects-project/src/components/Login/Login.js"],"names":["React","useState","useEffect","useReducer","useContext","useRef","Card","classes","Button","AuthContext","Input","emailReducer","state","action","type","value","val","isValid","includes","passwordReducer","trim","length","Login","props","formIsValid","setFormIsValid","emailState","dispatchEmail","passwordState","dispatchPassword","authCtx","emailInputRef","passwordInputRef","emailIsValid","passwordIsValid","identifier","setTimeout","console","log","clearTimeout","emailChangeHandler","event","target","passwordChangeHandler","validateEmailHandler","validatePasswordHandler","submitHandler","preventDefault","onLogin","current","activate","login","control","invalid","actions","btn"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useReducer, useContext, useRef } from \"react\";\r\nimport Card from \"../UI/Card/Card\";\r\nimport classes from \"./Login.module.css\";\r\nimport Button from \"../UI/Button/Button\";\r\nimport AuthContext from \"../../store/auth-context\";\r\nimport Input from \"../UI/input/input\";\r\n\r\n// Reducer function can be created outside the component scope because we dont\r\n// need any data from this component.\r\n// all the info needed by useReducer function will be generated automatically by react\r\n\r\nconst emailReducer = (state, action) => {\r\n  if (action.type === \"USER_INPUT\") {\r\n    return { value: action.val, isValid: action.val.includes(\"@\") };\r\n  }\r\n  if (action.type === \"INPUT_BLUR\") {\r\n    return { value: state.value, isValid: state.value.includes(\"@\") };\r\n  }\r\n  return { value: \"\", isValid: false };\r\n};\r\n\r\nconst passwordReducer = (state, action) => {\r\n  if (action.type === \"USER_INPUT\") {\r\n    return { value: action.val, isValid: action.val.trim().length > 6 };\r\n  }\r\n  if (action.type === \"INPUT_BLUR\") {\r\n    return { value: state.value, isValid: state.value.trim().length > 6 };\r\n  }\r\n  return { value: \"\", isValid: false };\r\n};\r\n\r\nconst Login = (props) => {\r\n  // const [enteredEmail, setEnteredEmail] = useState('');\r\n  // const [emailIsValid, setEmailIsValid] = useState();\r\n  // const [enteredPassword, setEnteredPassword] = useState('');\r\n  // const [passwordIsValid, setPasswordIsValid] = useState();\r\n  const [formIsValid, setFormIsValid] = useState(false);\r\n\r\n  //we will combine the value and the validity into one state managed by useReducer.\r\n\r\n  const [emailState, dispatchEmail] = useReducer(emailReducer, {\r\n    value: \"\",\r\n    isValid: null,\r\n  });\r\n\r\n  const [passwordState, dispatchPassword] = useReducer(passwordReducer, {\r\n    value: \"\",\r\n    isValid: null,\r\n  });\r\n\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const emailInputRef = useRef()\r\n  const passwordInputRef = useRef()\r\n\r\n  // after meeting the validity requiements for ex password exceeds 6 chars when we add more chars\r\n  // the function checks for validity again thats the case we dont want. we will use object destructuring technique\r\n  // to pull out certain props from an object\r\n\r\n  // this is alice assignment because its a part of object dest syntax\r\n  const { isValid: emailIsValid } = emailState;\r\n  const { isValid: passwordIsValid } = passwordState;\r\n\r\n  // USE EFFECT SECTION\r\n  useEffect(() => {\r\n    const identifier = setTimeout(() => {\r\n      console.log(\"Checking for validity\");\r\n      setFormIsValid(\r\n        // emailState.isValid && passwordState.isValid\r\n\r\n        // at this approach this function will excute only if the validity status changes\r\n        emailIsValid && passwordIsValid\r\n      );\r\n    }, 500);\r\n\r\n    //   // before useEffect function excution this clean up function will run except the first excution\r\n    return () => {\r\n      clearTimeout(identifier);\r\n    };\r\n  }, [emailIsValid, passwordIsValid]);\r\n\r\n  // in dependencies we added what we are using inside our useEffect function\r\n  // the function is excuted only if the dependencies are changed\r\n  // id we set [] in dependencies the function will excute onl on the first rendering page\r\n\r\n  const emailChangeHandler = (event) => {\r\n    // setEnteredEmail(event.target.value);\r\n\r\n    dispatchEmail({\r\n      type: \"USER_INPUT\",\r\n      val: event.target.value,\r\n    });\r\n\r\n    // in setFormIsValid we still dependent on the state value comes from the reducer function\r\n    // son its not optimal to make a state which depends on another state\r\n\r\n    // setFormIsValid(\r\n    //   event.target.value.includes('@') && passwordState.trim().length > 6\r\n    // )\r\n  };\r\n\r\n  const passwordChangeHandler = (event) => {\r\n    // setEnteredPassword(event.target.value);\r\n\r\n    dispatchPassword({ type: \"USER_INPUT\", val: event.target.value });\r\n\r\n    // when we use useState on a state that depends on two other states\r\n    // we may face an issue related to the state ordering.\r\n    // in some cases maybe this state will run before enteredPassword state\r\n    // which is an senario we want to avoid. here useReducers comes to work.\r\n    // or and we use useReduce hook when we have redundancy between states.\r\n    // like what we have above (enteredEmail state and validation state are related)\r\n\r\n    // in setFormIsValid we still dependent on the state value comes from the reducer function\r\n    // son its not optimal to make a state which depends on another state.\r\n    // so we return to useEffect to make sure that these states will run at the latest version\r\n\r\n    // setFormIsValid(\r\n    //   emailState.isValid && event.target.value.trim().length > 6\r\n    // )\r\n  };\r\n\r\n  const validateEmailHandler = () => {\r\n    // we are updating this state by looking at another state thats something we must not do\r\n    // because enteredEmail state may not be updated yet\r\n\r\n    // if we use a function option to get the latest state it wont work properly here\r\n    // because we will get the latest version of setEmailIsValid not the enteredEmail state\r\n\r\n    // useReducers coming handy in theses situations which needs to update a state\r\n    // according to another state by merging them into a one state.\r\n\r\n    // Replacing enteredEmail by emailState.value\r\n\r\n    // setEmailIsValid(emailState.isValid);\r\n\r\n    dispatchEmail({ type: \"INPUT_BLUR\" });\r\n  };\r\n\r\n  const validatePasswordHandler = () => {\r\n    // setPasswordIsValid(enteredPassword.trim().length > 6);\r\n    dispatchPassword({ type: \"INPUT_BLUR\" });\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    if(formIsValid){\r\n      authCtx.onLogin(emailState.value, passwordState.value);\r\n    }else if (!emailIsValid){\r\n      emailInputRef.current.activate()\r\n    }else{\r\n      passwordInputRef.current.activate()\r\n\r\n    }\r\n    \r\n  };\r\n\r\n  return (\r\n    <Card className={classes.login}>\r\n      <form onSubmit={submitHandler}>\r\n        <Input\r\n          ref={emailInputRef}\r\n          id=\"email\"\r\n          label=\"E-mail\"\r\n          type=\"email\"\r\n          isValid={emailIsValid}\r\n          value={emailState.value}\r\n          onChange={emailChangeHandler}\r\n          onBlur={validateEmailHandler}\r\n        ></Input>\r\n        <div\r\n          className={`${classes.control} ${\r\n            passwordState.isValid === false ? classes.invalid : \"\"\r\n          }`}\r\n        >\r\n          <label htmlFor=\"password\">Password</label>\r\n          <Input\r\n          ref={passwordInputRef}\r\n            type=\"password\"\r\n            id=\"Password\"\r\n            isValid={passwordIsValid}\r\n            value={passwordState.value}\r\n            onChange={passwordChangeHandler}\r\n            onBlur={validatePasswordHandler}\r\n          />\r\n        </div>\r\n        <div className={classes.actions}>\r\n          <Button type=\"submit\" className={classes.btn} >\r\n            Login\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}